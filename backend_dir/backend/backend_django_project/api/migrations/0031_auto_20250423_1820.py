# Generated by Django 5.0.4 on 2025-04-23 18:20

from django.db import migrations


def remove_all_references_from_to_endpoints_clusters(apps, schema_editor):
    Role = apps.get_model('api', 'Role')
    for role in Role.objects.all():
        role.endpoints_clusters.clear()
        role.save()


def remove_all_endpoints_cluster(apps, schema_editor):
    EndPointsCluster = apps.get_model('api', 'EndPointsCluster')
    EndPointsCluster.objects.all().delete()


def remove_all_endpoints(apps, schema_editor):
    Endpoint = apps.get_model('api', 'Endpoint')
    Endpoint.objects.all().delete()


def remove_all_resources(apps, schema_editor):
    Resource = apps.get_model('api', 'Resource')
    Resource.objects.all().delete()


def remove_all_cluster_types(apps, schema_editor):
    ClusterType = apps.get_model('api', 'ClusterType')
    ClusterType.objects.all().delete()


def create_cluster_types(apps, schema_editor):
    ClusterType = apps.get_model('api', 'ClusterType')
    cluster_types = [
        'read',
        'read-write',
        'read-create',
    ]
    for cluster_type in cluster_types:
        ClusterType.objects.create(name=cluster_type)


def create_resources(apps, schema_editor):
    Resource = apps.get_model('api', 'Resource')
    resources = [
        'users',
        'overview',
        'campaigns',
        'stations',
        'earthquakes',
        'sources-servers'
    ]
    for resource in resources:
        Resource.objects.create(name=resource)


def create_endpoints(apps, schema_editor):
    Endpoint = apps.get_model('api', 'Endpoint')
    api_routes = [
        ('/api/antennas', 'GET'),
        ('/api/campaigns', 'GET'),
        ('/api/campaigns/<PATH_PARAM>', 'GET'),
        ('/api/campaigns', 'POST'),
        ('/api/campaigns/<PATH_PARAM>', 'PUT'),
        ('/api/campaigns/<PATH_PARAM>', 'DELETE'),
        ('/api/countries', 'GET'),
        ('/api/distinct-stack-names/<PATH_PARAM>', 'GET'),
        ('/api/earthquakes', 'GET'),
        ('/api/earthquakes/<PATH_PARAM>/affected-stations', 'GET'),
        ('/api/endpoints-clusters', 'GET'),
        ('/api/events', 'GET'),
        ('/api/gamit-htc', 'GET'),
        ('/api/get-rinex-with-status/<PATH_PARAM>', 'GET'),
        ('/api/monument-types', 'GET'),
        ('/api/monument-types/<PATH_PARAM>', 'GET'),
        ('/api/monument-types', 'POST'),
        ('/api/monument-types/<PATH_PARAM>', 'PATCH'),
        ('/api/monument-types/<PATH_PARAM>', 'DELETE'),
        ('/api/networks', 'GET'),
        ('/api/people', 'GET'),
        ('/api/people/<PATH_PARAM>', 'GET'),
        ('/api/people', 'POST'),
        ('/api/people/<PATH_PARAM>', 'PATCH'),
        ('/api/people/<PATH_PARAM>', 'DELETE'),
        ('/api/people/<PATH_PARAM>/merge-to/<PATH_PARAM>', 'POST'),
        ('/api/receivers', 'GET'),
        ('/api/rinex', 'GET'),
        ('/api/rinex-completion-plot/<PATH_PARAM>', 'GET'),
        ('/api/rinex/<PATH_PARAM>/get-next-station-info', 'GET'),
        ('/api/rinex/<PATH_PARAM>/get-previous-station-info', 'GET'),
        ('/api/role-person-station', 'GET'),
        ('/api/role-person-station', 'POST'),
        ('/api/role-person-station/<PATH_PARAM>', 'DELETE'),
        ('/api/roles', 'GET'),
        ('/api/roles/<PATH_PARAM>', 'GET'),
        ('/api/roles', 'POST'),
        ('/api/roles/<PATH_PARAM>', 'PUT'),
        ('/api/sources-servers', 'GET'),
        ('/api/sources-servers/<PATH_PARAM>', 'GET'),
        ('/api/sources-servers', 'POST'),
        ('/api/sources-servers/<PATH_PARAM>', 'PUT'),
        ('/api/sources-servers/<PATH_PARAM>', 'PATCH'),
        ('/api/sources-servers/<PATH_PARAM>', 'DELETE'),
        ('/api/sources-servers/<PATH_PARAM>/merge-to/<PATH_PARAM>', 'POST'),
        ('/api/sources-formats', 'GET'),
        ('/api/sources-formats/<PATH_PARAM>', 'GET'),
        ('/api/sources-formats', 'POST'),
        ('/api/sources-formats/<PATH_PARAM>', 'PUT'),
        ('/api/sources-formats/<PATH_PARAM>', 'PATCH'),
        ('/api/sources-formats/<PATH_PARAM>', 'DELETE'),
        ('/api/sources-stations', 'GET'),
        ('/api/sources-stations/<PATH_PARAM>', 'GET'),
        ('/api/sources-stations', 'POST'),
        ('/api/sources-stations/<PATH_PARAM>', 'PUT'),
        ('/api/sources-stations/<PATH_PARAM>', 'PATCH'),
        ('/api/sources-stations/<PATH_PARAM>', 'DELETE'),
        ('/api/sources-stations/<PATH_PARAM>/swap-try-order/<PATH_PARAM>', 'POST'),
        ('/api/station-attached-files', 'GET'),
        ('/api/station-attached-files/<PATH_PARAM>', 'GET'),
        ('/api/station-attached-files', 'POST'),
        ('/api/station-attached-files/<PATH_PARAM>', 'PATCH'),
        ('/api/station-attached-files/<PATH_PARAM>', 'DELETE'),
        ('/api/station-images', 'GET'),
        ('/api/station-images/<PATH_PARAM>', 'GET'),
        ('/api/station-images', 'POST'),
        ('/api/station-images/<PATH_PARAM>', 'PATCH'),
        ('/api/station-images/<PATH_PARAM>', 'DELETE'),
        ('/api/station-info', 'GET'),
        ('/api/station-info/<PATH_PARAM>', 'GET'),
        ('/api/station-info', 'POST'),
        ('/api/station-info/<PATH_PARAM>', 'PUT'),
        ('/api/station-info/<PATH_PARAM>', 'DELETE'),
        ('/api/station-meta/<PATH_PARAM>', 'GET'),
        ('/api/station-meta/<PATH_PARAM>', 'PATCH'),
        ('/api/station-roles', 'GET'),
        ('/api/station-roles/<PATH_PARAM>', 'GET'),
        ('/api/station-roles', 'POST'),
        ('/api/station-roles/<PATH_PARAM>', 'PATCH'),
        ('/api/station-roles/<PATH_PARAM>', 'DELETE'),
        ('/api/station-status', 'GET'),
        ('/api/station-status/<PATH_PARAM>', 'GET'),
        ('/api/station-status', 'POST'),
        ('/api/station-status/<PATH_PARAM>', 'PATCH'),
        ('/api/station-status/<PATH_PARAM>', 'DELETE'),
        ('/api/station-status-color', 'GET'),
        ('/api/station-types', 'GET'),
        ('/api/station-types/<PATH_PARAM>', 'GET'),
        ('/api/station-types', 'POST'),
        ('/api/station-types/<PATH_PARAM>', 'PATCH'),
        ('/api/station-types/<PATH_PARAM>', 'DELETE'),
        ('/api/stations', 'GET'),
        ('/api/stations/<PATH_PARAM>', 'GET'),
        ('/api/stations', 'POST'),
        ('/api/stations/<PATH_PARAM>', 'PATCH'),
        ('/api/station/<PATH_PARAM>/insert-station-info-by-file', 'POST'),
        ('/api/time-series/<PATH_PARAM>', 'GET'),
        ('/api/time-series-config/available-jump-types', 'GET'),
        ('/api/time-series-config/<PATH_PARAM>/GAMIT/reset-jumps', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/GAMIT/reset-periodic', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/GAMIT/reset-polynomial', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/GAMIT/set-jumps', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/GAMIT/set-periodic', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/GAMIT/set-polynomial', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/PPP/reset-jumps', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/PPP/reset-periodic', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/PPP/reset-polynomial', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/PPP/set-jumps', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/PPP/set-periodic', 'POST'),
        ('/api/time-series-config/<PATH_PARAM>/PPP/set-polynomial', 'POST'),
        ('/api/users', 'GET'),
        ('/api/users/<PATH_PARAM>', 'GET'),
        ('/api/users', 'POST'),
        ('/api/users/<PATH_PARAM>', 'PATCH'),
        ('/api/visit-attached-files', 'GET'),
        ('/api/visit-attached-files/<PATH_PARAM>', 'GET'),
        ('/api/visit-attached-files', 'POST'),
        ('/api/visit-attached-files/<PATH_PARAM>', 'PATCH'),
        ('/api/visit-attached-files/<PATH_PARAM>', 'DELETE'),
        ('/api/visit-gnss-data-files', 'GET'),
        ('/api/visit-gnss-data-files/<PATH_PARAM>', 'GET'),
        ('/api/visit-gnss-data-files', 'POST'),
        ('/api/visit-gnss-data-files/<PATH_PARAM>', 'PATCH'),
        ('/api/visit-gnss-data-files/<PATH_PARAM>', 'DELETE'),
        ('/api/visit-images', 'GET'),
        ('/api/visit-images/<PATH_PARAM>', 'GET'),
        ('/api/visit-images', 'POST'),
        ('/api/visit-images/<PATH_PARAM>', 'PATCH'),
        ('/api/visit-images/<PATH_PARAM>', 'DELETE'),
        ('/api/visits', 'GET'),
        ('/api/visits/<PATH_PARAM>', 'GET'),
        ('/api/visits', 'POST'),
        ('/api/visits/<PATH_PARAM>', 'PUT'),
        ('/api/visits/<PATH_PARAM>', 'DELETE')
    ]

    for path, method in api_routes:
        Endpoint.objects.create(path=path, method=method)


def create_endpoints_clusters(apps, schema_editor):
    EndPointsCluster = apps.get_model('api', 'EndPointsCluster')
    Resource = apps.get_model('api', 'Resource')
    Endpoint = apps.get_model('api', 'Endpoint')
    ClusterType = apps.get_model('api', 'ClusterType')

    # earthquakes read
    earthquakes_read = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='earthquakes'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read')
    )
    earthquakes_read.endpoints.add(
        Endpoint.objects.get(path="/api/earthquakes", method="GET"))
    earthquakes_read.endpoints.add(
        Endpoint.objects.get(path='/api/earthquakes/<PATH_PARAM>/affected-stations', method="GET"))

    # users read

    users_read = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='users'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read')
    )
    users_read.endpoints.add(
        Endpoint.objects.get(path="/api/users", method="GET"))
    users_read.endpoints.add(
        Endpoint.objects.get(path="/api/users/<PATH_PARAM>", method="GET"))
    users_read.endpoints.add(
        Endpoint.objects.get(path="/api/roles", method="GET"))
    users_read.endpoints.add(
        Endpoint.objects.get(path="/api/roles/<PATH_PARAM>", method="GET"))
    users_read.endpoints.add(
        Endpoint.objects.get(path="/api/endpoints-clusters", method="GET"))

    # users read-write

    users_read_write = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='users'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read-write')
    )
    users_read_write.endpoints.set(
        users_read.endpoints.all())

    users_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/users", method="POST"))

    users_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/users/<PATH_PARAM>", method="PATCH"))

    users_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/roles", method="POST"))

    users_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/roles/<PATH_PARAM>", method="PUT"))

    # overview read
    overview_read = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='overview'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read')
    )
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/monument-types", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/users", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/monument-types/<PATH_PARAM>", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-status-color", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/people", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/people/<PATH_PARAM>", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-roles", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-roles/<PATH_PARAM>", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-types", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-types/<PATH_PARAM>", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-status", method="GET"))
    overview_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-status/<PATH_PARAM>", method="GET"))

    # overview read-write
    overview_read_write = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='overview'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read-write')
    )
    overview_read_write.endpoints.set(
        overview_read.endpoints.all())

    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/monument-types", method="POST"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/monument-types/<PATH_PARAM>", method="PATCH"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/monument-types/<PATH_PARAM>", method="DELETE"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-status", method="POST"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-status/<PATH_PARAM>", method="PATCH"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-status/<PATH_PARAM>", method="DELETE"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/people", method="POST"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/people/<PATH_PARAM>", method="PATCH"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/people/<PATH_PARAM>", method="DELETE"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/people/<PATH_PARAM>/merge-to/<PATH_PARAM>", method="POST"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-roles", method="POST"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-roles/<PATH_PARAM>", method="PATCH"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-roles/<PATH_PARAM>", method="DELETE"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-types", method="POST"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-types/<PATH_PARAM>", method="PATCH"))
    overview_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-types/<PATH_PARAM>", method="DELETE"))

    # campaigns read
    campaigns_read = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='campaigns'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read')
    )

    campaigns_read.endpoints.add(
        Endpoint.objects.get(path="/api/visits", method="GET"))
    campaigns_read.endpoints.add(
        Endpoint.objects.get(path="/api/visits/<PATH_PARAM>", method="GET"))
    campaigns_read.endpoints.add(
        Endpoint.objects.get(path="/api/campaigns", method="GET"))
    campaigns_read.endpoints.add(
        Endpoint.objects.get(path="/api/campaigns/<PATH_PARAM>", method="GET"))
    campaigns_read.endpoints.add(
        Endpoint.objects.get(path="/api/stations", method="GET"))
    campaigns_read.endpoints.add(
        Endpoint.objects.get(path="/api/stations/<PATH_PARAM>", method="GET"))
    campaigns_read.endpoints.add(
        Endpoint.objects.get(path="/api/people", method="GET"))
    campaigns_read.endpoints.add(
        Endpoint.objects.get(path="/api/people/<PATH_PARAM>", method="GET"))

    # campaigns read-write
    campaigns_read_write = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='campaigns'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read-write')
    )
    campaigns_read_write.endpoints.set(
        campaigns_read.endpoints.all())
    campaigns_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/campaigns", method="POST"))
    campaigns_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/campaigns/<PATH_PARAM>", method="PUT"))
    campaigns_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/campaigns/<PATH_PARAM>", method="DELETE"))

    # station read
    station_read = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='stations'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read')
    )

    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/stations", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/stations/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/networks", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/countries", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-types", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-types/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-status", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-status/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/rinex", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-meta/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-images", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-images/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/visits", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/visits/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/people", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/people/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-info", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-info/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/visit-gnss-data-files", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/visit-gnss-data-files/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/visit-attached-files", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/visit-attached-files/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/visit-images", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/visit-images/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/role-person-station", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-roles", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/receivers", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/antennas", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/gamit-htc", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/monument-types", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/monument-types/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-attached-files", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/station-attached-files/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/distinct-stack-names/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/time-series/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/available-jump-types", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/get-rinex-with-status/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/rinex-completion-plot/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/rinex/<PATH_PARAM>/get-next-station-info", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/rinex/<PATH_PARAM>/get-previous-station-info", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/events", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/campaigns", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/campaigns/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/visits/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/sources-servers", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/sources-servers/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/sources-formats", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/sources-formats/<PATH_PARAM>", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/sources-stations", method="GET"))
    station_read.endpoints.add(
        Endpoint.objects.get(path="/api/sources-stations/<PATH_PARAM>", method="GET"))

    # station read-create
    station_read_create = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='stations'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read-create')
    )

    station_read_create.endpoints.set(
        station_read.endpoints.all())

    station_read_create.endpoints.add(
        Endpoint.objects.get(path="/api/stations", method="POST"))

    # station read-write
    station_read_write = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='stations'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read-write')
    )

    station_read_write.endpoints.set(
        station_read_create.endpoints.all())
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-stations", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-stations/<PATH_PARAM>", method="PUT"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-stations/<PATH_PARAM>", method="PATCH"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-stations/<PATH_PARAM>", method="DELETE"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-stations/<PATH_PARAM>/swap-try-order/<PATH_PARAM>", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-images", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-images/<PATH_PARAM>", method="PATCH"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-images/<PATH_PARAM>", method="DELETE"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-info", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-info/<PATH_PARAM>", method="PUT"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-info/<PATH_PARAM>", method="DELETE"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station/<PATH_PARAM>/insert-station-info-by-file", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/stations/<PATH_PARAM>", method="PATCH"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-meta/<PATH_PARAM>", method="PATCH"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-attached-files", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-attached-files/<PATH_PARAM>", method="PATCH"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/station-attached-files/<PATH_PARAM>", method="DELETE"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/PPP/reset-polynomial", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/GAMIT/reset-polynomial", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/PPP/set-polynomial", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/GAMIT/set-polynomial", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/PPP/reset-periodic", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/GAMIT/reset-periodic", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/PPP/set-periodic", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/GAMIT/set-periodic", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/PPP/reset-jumps", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/GAMIT/reset-jumps", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/PPP/set-jumps", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/time-series-config/<PATH_PARAM>/GAMIT/set-jumps", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/role-person-station", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/role-person-station/<PATH_PARAM>", method="DELETE"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visits", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visits/<PATH_PARAM>", method="PUT"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visits/<PATH_PARAM>", method="DELETE"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visit-images", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visit-gnss-data-files", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visit-attached-files", method="POST"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visit-images/<PATH_PARAM>", method="PATCH"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visit-gnss-data-files/<PATH_PARAM>", method="PATCH"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visit-attached-files/<PATH_PARAM>", method="PATCH"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visit-images/<PATH_PARAM>", method="DELETE"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visit-gnss-data-files/<PATH_PARAM>", method="DELETE"))
    station_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/visit-attached-files/<PATH_PARAM>", method="DELETE"))

    # sources-servers read
    sources_servers_read = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='sources-servers'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read')
    )
    sources_servers_read.endpoints.add(
        Endpoint.objects.get(path="/api/sources-servers", method="GET"))
    sources_servers_read.endpoints.add(
        Endpoint.objects.get(path="/api/sources-servers/<PATH_PARAM>", method="GET"))
    sources_servers_read.endpoints.add(
        Endpoint.objects.get(path="/api/sources-formats", method="GET"))
    sources_servers_read.endpoints.add(
        Endpoint.objects.get(path="/api/sources-formats/<PATH_PARAM>", method="GET"))

    # sources-servers read-write
    sources_servers_read_write = EndPointsCluster.objects.create(
        resource=Resource.objects.get(name='sources-servers'),
        role_type='FRONT AND API',
        cluster_type=ClusterType.objects.get(name='read-write')
    )
    sources_servers_read_write.endpoints.set(
        sources_servers_read.endpoints.all())
    sources_servers_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-servers", method="POST"))
    sources_servers_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-servers/<PATH_PARAM>", method="PUT"))
    sources_servers_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-servers/<PATH_PARAM>", method="PATCH"))
    sources_servers_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-servers/<PATH_PARAM>", method="DELETE"))
    sources_servers_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-formats", method="POST"))
    sources_servers_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-formats/<PATH_PARAM>", method="PUT"))
    sources_servers_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-formats/<PATH_PARAM>", method="PATCH"))
    sources_servers_read_write.endpoints.add(
        Endpoint.objects.get(path="/api/sources-formats/<PATH_PARAM>", method="DELETE"))
    sources_servers_read_write.endpoints.add(
        Endpoint.objects.get(path='/api/sources-servers/<PATH_PARAM>/merge-to/<PATH_PARAM>', method="POST"))


def give_permissions_to_underprivileged_users(apps, schema_editor):
    Role = apps.get_model('api', 'Role')
    EndPointsCluster = apps.get_model('api', 'EndPointsCluster')

    try:
        underprivileged_api_role = Role.objects.get(name='underprivileged_api')
        underprivileged_api_role.endpoints_clusters.add(
            EndPointsCluster.objects.get(resource__name='stations', cluster_type__name='read', role_type='FRONT AND API'))
    except Role.DoesNotExist:
        pass
    try:
        underprivileged_api_role = Role.objects.get(
            name='underprivileged_front')
        underprivileged_api_role.endpoints_clusters.add(
            EndPointsCluster.objects.get(resource__name='stations', cluster_type__name='read', role_type='FRONT AND API'))
    except Role.DoesNotExist:
        pass


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0030_auto_20250423_1519'),
    ]

    operations = [
        migrations.RunPython(remove_all_references_from_to_endpoints_clusters),
        migrations.RunPython(remove_all_endpoints_cluster),
        migrations.RunPython(remove_all_endpoints),
        migrations.RunPython(remove_all_resources),
        migrations.RunPython(remove_all_cluster_types),
        migrations.RunPython(create_cluster_types),
        migrations.RunPython(create_resources),
        migrations.RunPython(create_endpoints),
        migrations.RunPython(create_endpoints_clusters),
        migrations.RunPython(give_permissions_to_underprivileged_users)
    ]
