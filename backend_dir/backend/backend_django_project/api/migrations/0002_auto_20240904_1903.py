# Generated by Django 5.0.4 on 2024-09-04 19:03
from django.db import migrations


import json
import os.path
from django.conf import settings
import psycopg2


def create_countries(apps, schema_editor):

    with open(os.path.join(settings.PROJECT_PATH, "assets", "countries.json"), "r") as f:
        countries = json.load(f)

    Country = apps.get_model("api", "Country")

    for country in countries:
        Country.objects.get_or_create(
            name=country["name"], two_digits_code=country["alpha-2"], three_digits_code=country["alpha-3"])


def connect_to_db():
    conn = psycopg2.connect(
        f'dbname={settings.DATABASES["default"]["NAME"]} user={settings.DATABASES["default"]["USER"]} password={settings.DATABASES["default"]["PASSWORD"]} host={settings.DATABASES["default"]["HOST"]} port={settings.DATABASES["default"]["PORT"]}')

    cur = conn.cursor()

    return conn, cur


def add_station_country_code_index(conn, cur):

    conn, cur = connect_to_db()

    query = "CREATE INDEX stations_country_code_idx ON stations(country_code)"
    try:
        print("Executing: ", query)
        cur.execute(query)
    except psycopg2.errors.DuplicateTable as e:
        print(f"Index already exists. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    cur.close()
    conn.close()


def add_alias_field_to_station(conn, cur):

    conn, cur = connect_to_db()

    query = "ALTER TABLE stations ADD COLUMN alias VARCHAR(4) DEFAULT NULL"
    try:
        print("Executing: ", query)
        cur.execute(query)
    except psycopg2.errors.DuplicateColumn:
        print("Column alias already exists. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    cur.close()
    conn.close()


def add_ant_daz_field_to_stationinfo(conn, cur):

    conn, cur = connect_to_db()

    query = "ALTER TABLE stationinfo ADD COLUMN AntDAZ NUMERIC(4, 1)"
    try:
        print("Executing: ", query)
        cur.execute(query)
    except psycopg2.errors.DuplicateColumn:
        print("Column AntDAZ already exists. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    cur.close()
    conn.close()


def create_admin_user(apps, schema_editor):

    Role = apps.get_model("api", "Role")
    User = apps.get_model("api", "User")

    admin_role = Role.objects.get_or_create(
        name="admin", role_api=False, allow_all=True)

    User.objects.get_or_create(
        password="argon2$argon2id$v=19$m=102400,t=2,p=8$ZHlsUlkxdE44YW1rV2E3OWo0VG44cQ$ZqzbGLeeekVmK99p9zOkPShiZzAnkH03oLOO35TlSvk",
        is_superuser=False,
        username="admin",
        first_name="",
        last_name="",
        email="",
        is_staff=False,
        is_active=True,
        role=admin_role[0]
    )


def create_endpoints(apps, schema_editor):
    Endpoint = apps.get_model("api", "Endpoint")
    endpoints = [
        ("/api/users", "GET"),
        ("/api/users", "POST"),
        ("/api/users/<PATH_PARAM>", "GET"),
        ("/api/users/<PATH_PARAM>", "PUT"),
        ("/api/users/<PATH_PARAM>", "PATCH"),
        ("/api/users/<PATH_PARAM>/photo", "GET"),
        ("/api/roles", "GET"),
        ("/api/roles", "POST"),
        ("/api/roles/<PATH_PARAM>", "GET"),
        ("/api/roles/<PATH_PARAM>", "PUT"),
        ("/api/roles/<PATH_PARAM>", "PATCH"),
        ("/api/endpoints", "GET"),
        ("/api/endpoints", "POST"),
        ("/api/endpoints/<PATH_PARAM>", "GET"),
        ("/api/endpoints/<PATH_PARAM>", "PUT"),
        ("/api/endpoints/<PATH_PARAM>", "PATCH"),
        ("/api/endpoints/<PATH_PARAM>", "DELETE"),
        ("/api/endpoints-clusters", "GET"),
        ("/api/endpoints-clusters", "POST"),
        ("/api/endpoints-clusters/<PATH_PARAM>", "GET"),
        ("/api/endpoints-clusters/<PATH_PARAM>", "PUT"),
        ("/api/endpoints-clusters/<PATH_PARAM>", "PATCH"),
        ("/api/endpoints-clusters/<PATH_PARAM>", "DELETE"),
        ("/api/station-info", "GET"),
        ("/api/station-info", "POST"),
        ("/api/station-info/<PATH_PARAM>", "GET"),
        ("/api/station-info/<PATH_PARAM>", "PUT"),
        ("/api/station-info/<PATH_PARAM>", "DELETE"),
        ("/api/networks", "GET"),
        ("/api/networks", "POST"),
        ("/api/networks/<PATH_PARAM>", "GET"),
        ("/api/networks/<PATH_PARAM>", "PUT"),
        ("/api/networks/<PATH_PARAM>", "PATCH"),
        ("/api/networks/<PATH_PARAM>", "DELETE"),
        ("/api/receivers", "GET"),
        ("/api/receivers", "POST"),
        ("/api/receivers/<PATH_PARAM>", "GET"),
        ("/api/receivers/<PATH_PARAM>", "PUT"),
        ("/api/receivers/<PATH_PARAM>", "PATCH"),
        ("/api/receivers/<PATH_PARAM>", "DELETE"),
        ("/api/antennas", "GET"),
        ("/api/antennas", "POST"),
        ("/api/antennas/<PATH_PARAM>", "GET"),
        ("/api/antennas/<PATH_PARAM>", "PUT"),
        ("/api/antennas/<PATH_PARAM>", "PATCH"),
        ("/api/antennas/<PATH_PARAM>", "DELETE"),
        ("/api/stations", "GET"),
        ("/api/stations", "POST"),
        ("/api/stations/<PATH_PARAM>", "GET"),
        ("/api/stations/<PATH_PARAM>", "PUT"),
        ("/api/stations/<PATH_PARAM>", "PATCH"),
        ("/api/stations/<PATH_PARAM>", "DELETE"),
        ("/api/station-codes/<PATH_PARAM>", "GET"),
        ("/api/apr-coords", "GET"),
        ("/api/apr-coords", "POST"),
        ("/api/apr-coords/<PATH_PARAM>", "GET"),
        ("/api/apr-coords/<PATH_PARAM>", "PUT"),
        ("/api/apr-coords/<PATH_PARAM>", "PATCH"),
        ("/api/apr-coords/<PATH_PARAM>", "DELETE"),
        ("/api/aws-sync", "GET"),
        ("/api/aws-sync", "POST"),
        ("/api/aws-sync/<PATH_PARAM>", "GET"),
        ("/api/aws-sync/<PATH_PARAM>", "PUT"),
        ("/api/aws-sync/<PATH_PARAM>", "PATCH"),
        ("/api/aws-sync/<PATH_PARAM>", "DELETE"),
        ("/api/campaigns", "GET"),
        ("/api/campaigns", "POST"),
        ("/api/campaigns/<PATH_PARAM>", "GET"),
        ("/api/campaigns/<PATH_PARAM>", "PUT"),
        ("/api/campaigns/<PATH_PARAM>", "PATCH"),
        ("/api/campaigns/<PATH_PARAM>", "DELETE"),
        ("/api/countries", "GET"),
        ("/api/countries", "POST"),
        ("/api/countries/<PATH_PARAM>", "GET"),
        ("/api/data-sources", "GET"),
        ("/api/data-sources", "POST"),
        ("/api/data-sources/<PATH_PARAM>", "GET"),
        ("/api/data-sources/<PATH_PARAM>", "PUT"),
        ("/api/data-sources/<PATH_PARAM>", "PATCH"),
        ("/api/data-sources/<PATH_PARAM>", "DELETE"),
        ("/api/earthquakes", "GET"),
        ("/api/earthquakes", "POST"),
        ("/api/earthquakes/<PATH_PARAM>", "GET"),
        ("/api/earthquakes/<PATH_PARAM>", "PUT"),
        ("/api/earthquakes/<PATH_PARAM>", "PATCH"),
        ("/api/earthquakes/<PATH_PARAM>", "DELETE"),
        ("/api/etm-params", "GET"),
        ("/api/etm-params", "POST"),
        ("/api/etm-params/<PATH_PARAM>", "GET"),
        ("/api/etm-params/<PATH_PARAM>", "PUT"),
        ("/api/etm-params/<PATH_PARAM>", "PATCH"),
        ("/api/etm-params/<PATH_PARAM>", "DELETE"),
        ("/api/etms", "GET"),
        ("/api/etms", "POST"),
        ("/api/etms/<PATH_PARAM>", "GET"),
        ("/api/etms/<PATH_PARAM>", "PUT"),
        ("/api/etms/<PATH_PARAM>", "PATCH"),
        ("/api/etms/<PATH_PARAM>", "DELETE"),
        ("/api/events", "GET"),
        ("/api/events", "POST"),
        ("/api/events/<PATH_PARAM>", "GET"),
        ("/api/events/<PATH_PARAM>", "PUT"),
        ("/api/events/<PATH_PARAM>", "PATCH"),
        ("/api/events/<PATH_PARAM>", "DELETE"),
        ("/api/executions", "GET"),
        ("/api/executions", "POST"),
        ("/api/executions/<PATH_PARAM>", "GET"),
        ("/api/executions/<PATH_PARAM>", "PUT"),
        ("/api/executions/<PATH_PARAM>", "PATCH"),
        ("/api/executions/<PATH_PARAM>", "DELETE"),
        ("/api/gamit-htc", "GET"),
        ("/api/gamit-htc", "POST"),
        ("/api/gamit-htc/<PATH_PARAM>", "GET"),
        ("/api/gamit-htc/<PATH_PARAM>", "PUT"),
        ("/api/gamit-htc/<PATH_PARAM>", "PATCH"),
        ("/api/gamit-htc/<PATH_PARAM>", "DELETE"),
        ("/api/gamit-soln", "GET"),
        ("/api/gamit-soln", "POST"),
        ("/api/gamit-soln/<PATH_PARAM>", "GET"),
        ("/api/gamit-soln/<PATH_PARAM>", "PUT"),
        ("/api/gamit-soln/<PATH_PARAM>", "PATCH"),
        ("/api/gamit-soln/<PATH_PARAM>", "DELETE"),
        ("/api/gamit-soln-excl", "GET"),
        ("/api/gamit-soln-excl", "POST"),
        ("/api/gamit-soln-excl/<PATH_PARAM>", "GET"),
        ("/api/gamit-soln-excl/<PATH_PARAM>", "PUT"),
        ("/api/gamit-soln-excl/<PATH_PARAM>", "PATCH"),
        ("/api/gamit-soln-excl/<PATH_PARAM>", "DELETE"),
        ("/api/gamit-stats", "GET"),
        ("/api/gamit-stats", "POST"),
        ("/api/gamit-stats/<PATH_PARAM>", "GET"),
        ("/api/gamit-stats/<PATH_PARAM>", "PUT"),
        ("/api/gamit-stats/<PATH_PARAM>", "PATCH"),
        ("/api/gamit-stats/<PATH_PARAM>", "DELETE"),
        ("/api/gamit-subnets", "GET"),
        ("/api/gamit-subnets", "POST"),
        ("/api/gamit-subnets/<PATH_PARAM>", "GET"),
        ("/api/gamit-subnets/<PATH_PARAM>", "PUT"),
        ("/api/gamit-subnets/<PATH_PARAM>", "PATCH"),
        ("/api/gamit-subnets/<PATH_PARAM>", "DELETE"),
        ("/api/gamit-ztd", "GET"),
        ("/api/gamit-ztd", "POST"),
        ("/api/gamit-ztd/<PATH_PARAM>", "GET"),
        ("/api/gamit-ztd/<PATH_PARAM>", "PUT"),
        ("/api/gamit-ztd/<PATH_PARAM>", "PATCH"),
        ("/api/gamit-ztd/<PATH_PARAM>", "DELETE"),
        ("/api/keys", "GET"),
        ("/api/keys", "POST"),
        ("/api/keys/<PATH_PARAM>", "GET"),
        ("/api/keys/<PATH_PARAM>", "PUT"),
        ("/api/keys/<PATH_PARAM>", "PATCH"),
        ("/api/keys/<PATH_PARAM>", "DELETE"),
        ("/api/locks", "GET"),
        ("/api/locks", "POST"),
        ("/api/locks/<PATH_PARAM>", "GET"),
        ("/api/locks/<PATH_PARAM>", "PUT"),
        ("/api/locks/<PATH_PARAM>", "PATCH"),
        ("/api/locks/<PATH_PARAM>", "DELETE"),
        ("/api/ppp-soln", "GET"),
        ("/api/ppp-soln", "POST"),
        ("/api/ppp-soln/<PATH_PARAM>", "GET"),
        ("/api/ppp-soln/<PATH_PARAM>", "PUT"),
        ("/api/ppp-soln/<PATH_PARAM>", "PATCH"),
        ("/api/ppp-soln/<PATH_PARAM>", "DELETE"),
        ("/api/ppp-soln-excl", "GET"),
        ("/api/ppp-soln-excl", "POST"),
        ("/api/ppp-soln-excl/<PATH_PARAM>", "GET"),
        ("/api/ppp-soln-excl/<PATH_PARAM>", "PUT"),
        ("/api/ppp-soln-excl/<PATH_PARAM>", "PATCH"),
        ("/api/ppp-soln-excl/<PATH_PARAM>", "DELETE"),
        ("/api/rinex", "GET"),
        ("/api/rinex", "POST"),
        ("/api/rinex/<PATH_PARAM>", "GET"),
        ("/api/rinex/<PATH_PARAM>", "PUT"),
        ("/api/rinex/<PATH_PARAM>", "PATCH"),
        ("/api/rinex/<PATH_PARAM>", "DELETE"),
        ("/api/rinex-sources-info", "GET"),
        ("/api/rinex-sources-info", "POST"),
        ("/api/rinex-sources-info/<PATH_PARAM>", "GET"),
        ("/api/rinex-sources-info/<PATH_PARAM>", "PUT"),
        ("/api/rinex-sources-info/<PATH_PARAM>", "PATCH"),
        ("/api/rinex-sources-info/<PATH_PARAM>", "DELETE"),
        ("/api/rinex-tank-struct", "GET"),
        ("/api/rinex-tank-struct", "POST"),
        ("/api/rinex-tank-struct/<PATH_PARAM>", "GET"),
        ("/api/rinex-tank-struct/<PATH_PARAM>", "PUT"),
        ("/api/rinex-tank-struct/<PATH_PARAM>", "PATCH"),
        ("/api/rinex-tank-struct/<PATH_PARAM>", "DELETE"),
        ("/api/sources-formats", "GET"),
        ("/api/sources-formats", "POST"),
        ("/api/sources-formats/<PATH_PARAM>", "GET"),
        ("/api/sources-formats/<PATH_PARAM>", "PUT"),
        ("/api/sources-formats/<PATH_PARAM>", "PATCH"),
        ("/api/sources-formats/<PATH_PARAM>", "DELETE"),
        ("/api/sources-servers", "GET"),
        ("/api/sources-servers", "POST"),
        ("/api/sources-servers/<PATH_PARAM>", "GET"),
        ("/api/sources-servers/<PATH_PARAM>", "PUT"),
        ("/api/sources-servers/<PATH_PARAM>", "PATCH"),
        ("/api/sources-servers/<PATH_PARAM>", "DELETE"),
        ("/api/sources-stations", "GET"),
        ("/api/sources-stations", "POST"),
        ("/api/sources-stations/<PATH_PARAM>", "GET"),
        ("/api/sources-stations/<PATH_PARAM>", "PUT"),
        ("/api/sources-stations/<PATH_PARAM>", "PATCH"),
        ("/api/sources-stations/<PATH_PARAM>", "DELETE"),
        ("/api/stacks", "GET"),
        ("/api/stacks", "POST"),
        ("/api/stacks/<PATH_PARAM>", "GET"),
        ("/api/stacks/<PATH_PARAM>", "PUT"),
        ("/api/stacks/<PATH_PARAM>", "PATCH"),
        ("/api/stacks/<PATH_PARAM>", "DELETE"),
        ("/api/stationalias", "GET"),
        ("/api/stationalias", "POST"),
        ("/api/stationalias/<PATH_PARAM>", "GET"),
        ("/api/stationalias/<PATH_PARAM>", "PUT"),
        ("/api/stationalias/<PATH_PARAM>", "PATCH"),
        ("/api/stationalias/<PATH_PARAM>", "DELETE"),
        ("/api/monument-types", "GET"),
        ("/api/monument-types", "POST"),
        ("/api/monument-types/<PATH_PARAM>", "GET"),
        ("/api/monument-types/<PATH_PARAM>", "PUT"),
        ("/api/monument-types/<PATH_PARAM>", "PATCH"),
        ("/api/monument-types/<PATH_PARAM>", "DELETE"),
        ("/api/people", "GET"),
        ("/api/people", "POST"),
        ("/api/people/<PATH_PARAM>", "GET"),
        ("/api/people/<PATH_PARAM>", "PUT"),
        ("/api/people/<PATH_PARAM>", "PATCH"),
        ("/api/people/<PATH_PARAM>", "DELETE"),
        ("/api/role-person-station", "GET"),
        ("/api/role-person-station", "POST"),
        ("/api/role-person-station/<PATH_PARAM>", "GET"),
        ("/api/role-person-station/<PATH_PARAM>", "PUT"),
        ("/api/role-person-station/<PATH_PARAM>", "PATCH"),
        ("/api/role-person-station/<PATH_PARAM>", "DELETE"),
        ("/api/station-attached-files", "GET"),
        ("/api/station-attached-files", "POST"),
        ("/api/station-attached-files/<PATH_PARAM>", "GET"),
        ("/api/station-attached-files/<PATH_PARAM>", "DELETE"),
        ("/api/station-images", "GET"),
        ("/api/station-images", "POST"),
        ("/api/station-images/<PATH_PARAM>", "GET"),
        ("/api/station-images/<PATH_PARAM>", "DELETE"),
        ("/api/station-meta", "GET"),
        ("/api/station-meta", "POST"),
        ("/api/station-meta/<PATH_PARAM>", "GET"),
        ("/api/station-meta/<PATH_PARAM>", "PUT"),
        ("/api/station-meta/<PATH_PARAM>", "PATCH"),
        ("/api/station-meta/<PATH_PARAM>", "DELETE"),
        ("/api/station-roles", "GET"),
        ("/api/station-roles", "POST"),
        ("/api/station-roles/<PATH_PARAM>", "GET"),
        ("/api/station-roles/<PATH_PARAM>", "PUT"),
        ("/api/station-roles/<PATH_PARAM>", "PATCH"),
        ("/api/station-roles/<PATH_PARAM>", "DELETE"),
        ("/api/station-status", "GET"),
        ("/api/station-status", "POST"),
        ("/api/station-status/<PATH_PARAM>", "GET"),
        ("/api/station-status/<PATH_PARAM>", "PUT"),
        ("/api/station-status/<PATH_PARAM>", "PATCH"),
        ("/api/station-status/<PATH_PARAM>", "DELETE"),
        ("/api/station-types", "GET"),
        ("/api/station-types", "POST"),
        ("/api/station-types/<PATH_PARAM>", "GET"),
        ("/api/station-types/<PATH_PARAM>", "PUT"),
        ("/api/station-types/<PATH_PARAM>", "PATCH"),
        ("/api/station-types/<PATH_PARAM>", "DELETE"),
        ("/api/visit-attached-files", "GET"),
        ("/api/visit-attached-files", "POST"),
        ("/api/visit-attached-files/<PATH_PARAM>", "GET"),
        ("/api/visit-attached-files/<PATH_PARAM>", "DELETE"),
        ("/api/visit-gnss-data-files", "GET"),
        ("/api/visit-gnss-data-files", "POST"),
        ("/api/visit-gnss-data-files/<PATH_PARAM>", "GET"),
        ("/api/visit-gnss-data-files/<PATH_PARAM>", "DELETE"),
        ("/api/visit-images", "GET"),
        ("/api/visit-images", "POST"),
        ("/api/visit-images/<PATH_PARAM>", "GET"),
        ("/api/visit-images/<PATH_PARAM>", "DELETE"),
        ("/api/visits", "GET"),
        ("/api/visits", "POST"),
        ("/api/visits/<PATH_PARAM>", "GET"),
        ("/api/visits/<PATH_PARAM>", "PUT"),
        ("/api/visits/<PATH_PARAM>", "PATCH"),
        ("/api/visits/<PATH_PARAM>", "DELETE"),
    ]
    for path, method in endpoints:
        Endpoint.objects.get_or_create(path=path, method=method)


def create_endpoints_cluster_types(apps, schema_editor):
    ClusterType = apps.get_model("api", "ClusterType")

    cluster_types = ["read", "read-write"]

    for cluster_type in cluster_types:
        ClusterType.objects.get_or_create(name=cluster_type)


def create_resources(apps, schema_editor):
    Resource = apps.get_model("api", "Resource")

    resources = ["users", "roles", "campaigns", "people", "station-attached-files", "station-info", "station-meta", "station-roles", "visit-attached-files", "visit-gnss-data-files", "visit-images", "visits-station", "station-status", "station-types", "station-images", "networks", "receivers", "antennas", "stations", "station-codes", "apr-coords", "aws-sync", "countries", "data-sources", "earthquakes", "etm-params", "etms", "events", "executions",
                 "people-station", "metadata", "overview", "gamit-htc", "gamit-soln", "gamit-soln-excl", "gamit-stats", "gamit-subnets", "gamit-ztd", "keys", "locks", "ppp-soln", "ppp-soln-excl", "rinex", "rinex-sources-info", "rinex-tank-struct", "sources-formats", "sources-servers", "sources-stations", "stacks", "stationalias"]

    for resource in resources:
        Resource.objects.get_or_create(name=resource)


def create_endpoints_cluster(apps, schema_editor):
    endpoints_cluster = apps.get_model("api", "EndPointsCluster")
    endpoint = apps.get_model("api", "Endpoint")
    cluster_type = apps.get_model("api", "ClusterType")
    role = apps.get_model("api", "Role")
    resource = apps.get_model("api", "Resource")

    # READ STATIONS
    front_read_stations = endpoints_cluster(resource=resource.objects.get(name='stations'),
                                            cluster_type=cluster_type.objects.get(name="read"), role_type='FRONT AND API')
    front_read_stations.save()
    front_read_stations.endpoints.add(
        endpoint.objects.get(path="/api/stations", method="GET"))
    front_read_stations.endpoints.add(
        endpoint.objects.get(path="/api/countries", method="GET"))
    front_read_stations.endpoints.add(
        endpoint.objects.get(path="/api/networks", method="GET"))
    front_read_stations.endpoints.add(endpoint.objects.get(
        path="/api/station-meta/<PATH_PARAM>", method="GET"))
    front_read_stations.endpoints.add(
        endpoint.objects.get(path="/api/rinex", method="GET"))

    # READ STATIONINFO

    front_read_stationinfo = endpoints_cluster(resource=resource.objects.get(name='station-info'),
                                               cluster_type=cluster_type.objects.get(name="read"), role_type='FRONT AND API')
    front_read_stationinfo.save()
    front_read_stationinfo.endpoints.add(
        endpoint.objects.get(path="/api/stations", method="GET"))
    front_read_stationinfo.endpoints.add(endpoint.objects.get(
        path="/api/station-meta/<PATH_PARAM>", method="GET"))
    front_read_stationinfo.endpoints.add(
        endpoint.objects.get(path="/api/station-info", method="GET"))

    # READ-WRITE STATIONINFO

    front_readwrite_stationinfo = endpoints_cluster(resource=resource.objects.get(name='station-info'),
                                                    cluster_type=cluster_type.objects.get(name="read-write"), role_type='FRONT AND API')
    front_readwrite_stationinfo.save()
    front_readwrite_stationinfo.endpoints.set(
        front_read_stationinfo.endpoints.all())
    front_readwrite_stationinfo.endpoints.add(
        endpoint.objects.get(path="/api/receivers", method="GET"))
    front_readwrite_stationinfo.endpoints.add(
        endpoint.objects.get(path="/api/antennas", method="GET"))
    front_readwrite_stationinfo.endpoints.add(
        endpoint.objects.get(path="/api/gamit-htc", method="GET"))
    front_readwrite_stationinfo.endpoints.add(
        endpoint.objects.get(path="/api/station-info", method="POST"))
    front_readwrite_stationinfo.endpoints.add(*endpoint.objects.filter(
        path="/api/station-info/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))

    # READ STATION-IMAGES
    front_read_station_images = endpoints_cluster(resource=resource.objects.get(name='station-images'),
                                                  cluster_type=cluster_type.objects.get(name="read"), role_type='FRONT AND API')
    front_read_station_images.save()
    front_read_station_images.endpoints.add(
        endpoint.objects.get(path="/api/stations", method="GET"))
    front_read_station_images.endpoints.add(
        endpoint.objects.get(path="/api/station-images", method="GET"))

    # READ-WRITE STATION-IMAGES
    front_read_write_station_images = endpoints_cluster(resource=resource.objects.get(name='station-images'),
                                                        cluster_type=cluster_type.objects.get(name="read-write"), role_type='FRONT AND API')
    front_read_write_station_images.save()
    front_read_write_station_images.endpoints.set(
        front_read_station_images.endpoints.all())
    front_read_write_station_images.endpoints.add(
        endpoint.objects.get(path="/api/station-images", method="POST"))
    front_read_write_station_images.endpoints.add(endpoint.objects.get(
        path="/api/station-images/<PATH_PARAM>", method="DELETE"))

    # READ OVERVIEW
    front_read_overview = endpoints_cluster(resource=resource.objects.get(name='overview'),
                                            cluster_type=cluster_type.objects.get(name="read"), role_type='FRONT AND API')
    front_read_overview.save()
    front_read_overview.endpoints.add(
        endpoint.objects.get(path="/api/monument-types", method="GET"))
    front_read_overview.endpoints.add(
        endpoint.objects.get(path="/api/station-status", method="GET"))
    front_read_overview.endpoints.add(
        endpoint.objects.get(path="/api/people", method="GET"))
    front_read_overview.endpoints.add(
        endpoint.objects.get(path="/api/station-roles", method="GET"))
    front_read_overview.endpoints.add(
        endpoint.objects.get(path="/api/station-types", method="GET"))

    # READ-WRITE OVERVIEW

    front_readwrite_overview = endpoints_cluster(resource=resource.objects.get(name='overview'),
                                                 cluster_type=cluster_type.objects.get(name="read-write"), role_type='FRONT AND API')
    front_readwrite_overview.save()
    front_readwrite_overview.endpoints.set(
        front_read_overview.endpoints.all())
    front_readwrite_overview.endpoints.add(
        endpoint.objects.get(path="/api/monument-types", method="POST"))
    front_readwrite_overview.endpoints.add(
        *endpoint.objects.filter(path="/api/monument-types/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))
    front_readwrite_overview.endpoints.add(
        endpoint.objects.get(path="/api/station-status", method="POST"))
    front_readwrite_overview.endpoints.add(
        *endpoint.objects.filter(path="/api/station-status/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))
    front_readwrite_overview.endpoints.add(
        endpoint.objects.get(path="/api/users", method="GET"))
    front_readwrite_overview.endpoints.add(
        endpoint.objects.get(path="/api/people", method="POST"))
    front_readwrite_overview.endpoints.add(
        *endpoint.objects.filter(path="/api/people/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))
    front_readwrite_overview.endpoints.add(
        endpoint.objects.get(path="/api/station-roles", method="POST"))
    front_readwrite_overview.endpoints.add(
        *endpoint.objects.filter(path="/api/station-roles/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))
    front_readwrite_overview.endpoints.add(
        endpoint.objects.get(path="/api/station-types", method="POST"))
    front_readwrite_overview.endpoints.add(
        *endpoint.objects.filter(path="/api/station-types/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))

    # READ USERS
    front_read_users = endpoints_cluster(resource=resource.objects.get(name='users'),
                                         cluster_type=cluster_type.objects.get(name="read"), role_type='FRONT AND API')
    front_read_users.save()
    front_read_users.endpoints.add(
        endpoint.objects.get(path="/api/users", method="GET"))
    front_read_users.endpoints.add(
        endpoint.objects.get(path="/api/roles", method="GET"))

    # READ-WRITE USERS

    front_readwrite_users = endpoints_cluster(resource=resource.objects.get(name='users'),
                                              cluster_type=cluster_type.objects.get(name="read-write"), role_type='FRONT AND API')
    front_readwrite_users.save()
    front_readwrite_users.endpoints.set(
        front_read_users.endpoints.all())
    front_readwrite_users.endpoints.add(
        endpoint.objects.get(path="/api/users/<PATH_PARAM>/photo", method="GET"))
    front_readwrite_users.endpoints.add(
        endpoint.objects.get(path="/api/users", method="POST"))
    front_readwrite_users.endpoints.add(
        *endpoint.objects.filter(path="/api/users/<PATH_PARAM>", method__in=["PUT", "PATCH"]))
    front_readwrite_users.endpoints.add(
        endpoint.objects.get(path="/api/roles", method="POST"))
    front_readwrite_users.endpoints.add(
        *endpoint.objects.filter(path="/api/roles/<PATH_PARAM>", method__in=["PUT", "PATCH"]))
    front_readwrite_users.endpoints.add(
        endpoint.objects.get(path="/api/endpoints-clusters", method="GET"))

    # READ METADATA

    front_read_metadata = endpoints_cluster(resource=resource.objects.get(name='metadata'),
                                            cluster_type=cluster_type.objects.get(name="read"), role_type='FRONT AND API')
    front_read_metadata.save()
    front_read_metadata.endpoints.add(
        endpoint.objects.get(path="/api/stations", method="GET"))
    front_read_metadata.endpoints.add(
        endpoint.objects.get(path="/api/station-meta/<PATH_PARAM>", method="GET"))
    front_read_metadata.endpoints.add(
        endpoint.objects.get(path="/api/station-attached-files", method="GET"))
    front_read_metadata.endpoints.add(
        endpoint.objects.get(path="/api/station-status", method="GET"))
    front_read_metadata.endpoints.add(
        endpoint.objects.get(path="/api/rinex", method="GET"))
    front_read_metadata.endpoints.add(
        endpoint.objects.get(path="/api/station-info", method="GET"))
    front_read_metadata.endpoints.add(
        endpoint.objects.get(path="/api/station-types", method="GET"))
    front_read_metadata.endpoints.add(
        endpoint.objects.get(path="/api/monument-types", method="GET"))

    # READ-WRITE METADATA

    front_read_write_metadata = endpoints_cluster(resource=resource.objects.get(name='metadata'),
                                                  cluster_type=cluster_type.objects.get(name="read-write"), role_type='FRONT AND API')
    front_read_write_metadata.save()
    front_read_write_metadata.endpoints.set(
        front_read_metadata.endpoints.all())
    front_read_write_metadata.endpoints.add(
        *endpoint.objects.filter(path="/api/stations/<PATH_PARAM>", method__in=["PUT", "PATCH"]))
    front_read_write_metadata.endpoints.add(
        *endpoint.objects.filter(path="/api/station-meta/<PATH_PARAM>", method__in=["PUT", "PATCH"]))
    front_read_write_metadata.endpoints.add(
        endpoint.objects.get(path="/api/station-attached-files", method="POST"))
    front_read_write_metadata.endpoints.add(
        endpoint.objects.get(path="/api/station-attached-files/<PATH_PARAM>", method="DELETE"))

    # READ PEOPLE-STATION

    front_read_people_station = endpoints_cluster(resource=resource.objects.get(name='people-station'),
                                                  cluster_type=cluster_type.objects.get(name="read"), role_type='FRONT AND API')
    front_read_people_station.save()
    front_read_people_station.endpoints.add(
        endpoint.objects.get(path="/api/stations", method="GET"))
    front_read_people_station.endpoints.add(
        endpoint.objects.get(path="/api/station-meta/<PATH_PARAM>", method="GET"))
    front_read_people_station.endpoints.add(
        endpoint.objects.get(path="/api/role-person-station", method="GET"))
    front_read_people_station.endpoints.add(
        endpoint.objects.get(path="/api/people", method="GET"))
    front_read_people_station.endpoints.add(
        endpoint.objects.get(path="/api/station-roles", method="GET"))

    # READ-WRITE PEOPLE-STATION
    front_read_write_people_station = endpoints_cluster(resource=resource.objects.get(name='people-station'),
                                                        cluster_type=cluster_type.objects.get(name="read-write"), role_type='FRONT AND API')
    front_read_write_people_station.save()
    front_read_write_people_station.endpoints.set(
        front_read_people_station.endpoints.all())
    front_read_write_people_station.endpoints.add(
        endpoint.objects.get(path="/api/role-person-station", method="POST"))
    front_read_write_people_station.endpoints.add(
        endpoint.objects.get(path="/api/role-person-station/<PATH_PARAM>", method="DELETE"))

    # READ VISITS

    front_read_visits_station = endpoints_cluster(resource=resource.objects.get(name='visits-station'),
                                                  cluster_type=cluster_type.objects.get(name="read"), role_type='FRONT AND API')
    front_read_visits_station.save()
    front_read_visits_station.endpoints.add(
        endpoint.objects.get(path="/api/stations", method="GET"))
    front_read_visits_station.endpoints.add(
        endpoint.objects.get(path="/api/visits", method="GET"))
    front_read_visits_station.endpoints.add(
        endpoint.objects.get(path="/api/visits/<PATH_PARAM>", method="GET"))
    front_read_visits_station.endpoints.add(
        endpoint.objects.get(path="/api/visit-images", method="GET"))
    front_read_visits_station.endpoints.add(
        endpoint.objects.get(path="/api/station-meta/<PATH_PARAM>", method="GET"))
    front_read_visits_station.endpoints.add(
        endpoint.objects.get(path="/api/campaigns", method="GET"))
    front_read_visits_station.endpoints.add(
        endpoint.objects.get(path="/api/visit-gnss-data-files", method="GET"))
    front_read_visits_station.endpoints.add(
        endpoint.objects.get(path="/api/visit-attached-files", method="GET"))

    # READ-WRITE VISITS

    front_read_write_visits_station = endpoints_cluster(resource=resource.objects.get(name='visits-station'),
                                                        cluster_type=cluster_type.objects.get(name="read-write"), role_type='FRONT AND API')
    front_read_write_visits_station.save()
    front_read_write_visits_station.endpoints.set(
        front_read_visits_station.endpoints.all())

    front_read_write_visits_station.endpoints.add(
        *endpoint.objects.filter(path="/api/people", method__in=["GET"]))

    front_read_write_visits_station.endpoints.add(
        *endpoint.objects.filter(path="/api/visits", method__in=["POST"]))

    front_read_write_visits_station.endpoints.add(
        *endpoint.objects.filter(path="/api/visit-images", method__in=["POST"]))

    front_read_write_visits_station.endpoints.add(
        *endpoint.objects.filter(path="/api/visit-attached-files", method__in=["POST"]))

    front_read_write_visits_station.endpoints.add(
        *endpoint.objects.filter(path="/api/visit-gnss-data-files", method__in=["POST"]))

    front_read_write_visits_station.endpoints.add(
        *endpoint.objects.filter(path="/api/visits/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))

    front_read_write_visits_station.endpoints.add(
        *endpoint.objects.filter(path="/api/visit-images/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))

    front_read_write_visits_station.endpoints.add(
        *endpoint.objects.filter(path="/api/visit-gnss-data-files/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))

    front_read_write_visits_station.endpoints.add(
        *endpoint.objects.filter(path="/api/visit-attached-files/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))

    # READ CAMPAIGNS

    front_read_campaigns_station = endpoints_cluster(resource=resource.objects.get(name='campaigns'),
                                                     cluster_type=cluster_type.objects.get(name="read"), role_type='FRONT AND API')
    front_read_campaigns_station.save()

    front_read_campaigns_station.endpoints.add(
        endpoint.objects.get(path="/api/visits", method="GET"))

    front_read_campaigns_station.endpoints.add(
        endpoint.objects.get(path="/api/campaigns", method="GET"))

    # READ-WRITE CAMPAIGNS

    front_read_write_campaigns_station = endpoints_cluster(resource=resource.objects.get(name='campaigns'),
                                                           cluster_type=cluster_type.objects.get(name="read-write"), role_type='FRONT AND API')
    front_read_write_campaigns_station.save()
    front_read_write_campaigns_station.endpoints.set(
        front_read_campaigns_station.endpoints.all())

    front_read_write_campaigns_station.endpoints.add(
        *endpoint.objects.filter(path="/api/stations", method__in=["GET"]))

    front_read_write_campaigns_station.endpoints.add(
        *endpoint.objects.filter(path="/api/campaigns", method__in=["POST"]))

    front_read_write_campaigns_station.endpoints.add(
        *endpoint.objects.filter(path="/api/campaigns/<PATH_PARAM>", method__in=["PUT", "PATCH", "DELETE"]))

    front_read_write_campaigns_station.endpoints.add(
        *endpoint.objects.filter(path="/api/visits/<PATH_PARAM>", method__in=["PUT", "PATCH"]))


def create_underprivileged_front_user(apps, schema_editor):

    Role = apps.get_model("api", "Role")
    User = apps.get_model("api", "User")
    EndPointsCluster = apps.get_model("api", "EndPointsCluster")
    cluster_type = apps.get_model("api", "ClusterType")
    resource = apps.get_model("api", "Resource")

    underprivileged_role = Role.objects.get_or_create(
        name="underprivileged_front", role_api=False, allow_all=False)[0]

    underprivileged_role.endpoints_clusters.add(EndPointsCluster.objects.get(resource=resource.objects.get(name='stations'),
                                                                             cluster_type=cluster_type.objects.get(name="read"), role_type='FRONT AND API'))

    User.objects.get_or_create(
        password="argon2$argon2id$v=19$m=102400,t=2,p=8$azNFTmxWNmw3TmtwaUh4OFBsNXF5TA$bZfPpIW+vzqgk1X0mrRioyWOmJBRTYSxpXwelY50kpk",
        is_superuser=False,
        username="underprivileged_front",
        first_name="",
        last_name="",
        email="",
        is_staff=False,
        is_active=True,
        role=underprivileged_role
    )


def create_underprivileged_api_user(apps, schema_editor):

    Role = apps.get_model("api", "Role")
    User = apps.get_model("api", "User")
    EndPointsCluster = apps.get_model("api", "EndPointsCluster")
    ClusterType = apps.get_model("api", "ClusterType")
    Resource = apps.get_model("api", "Resource")

    underprivileged_role = Role.objects.get_or_create(
        name="underprivileged_api", role_api=True, allow_all=False)[0]

    underprivileged_role.endpoints_clusters.add(EndPointsCluster.objects.get(resource=Resource.objects.get(name='stations'),
                                                                             cluster_type=ClusterType.objects.get(name="read"), role_type='FRONT AND API'))

    User.objects.get_or_create(
        password="argon2$argon2id$v=19$m=102400,t=2,p=8$d05JM2VxVDRNYml6dDlBRkVIMWZxYQ$kVtHD0ErTt7DGDPmOqXykvZJagvgYoZ6nLdqy9Z381Q",
        is_superuser=False,
        username="underprivileged_api",
        first_name="",
        last_name="",
        email="",
        is_staff=False,
        is_active=True,
        role=underprivileged_role
    )


def insert_station_status(apps, schema_editor):
    StationStatus = apps.get_model("api", "StationStatus")

    StationStatus.objects.get_or_create(name="Active Online")
    StationStatus.objects.get_or_create(name="Active Offline")
    StationStatus.objects.get_or_create(name="Deactivated")
    StationStatus.objects.get_or_create(name="Destroyed")
    StationStatus.objects.get_or_create(name="Unknown")


def insert_default_station_meta(apps, schema_editor):
    Station = apps.get_model("api", "Stations")
    StationMeta = apps.get_model("api", "StationMeta")
    StationStatus = apps.get_model("api", "StationStatus")
    MonumentTypes = apps.get_model("api", "MonumentType")

    stations = Station.objects.all()

    for station in stations:
        StationMeta.objects.get_or_create(station=station, status=StationStatus.objects.get(
            name="Active Online"), has_gaps=False, has_gaps_last_update_datetime=None, has_gaps_update_needed=True)


def create_gaps_function(apps, schema_editor):
    conn, cur = connect_to_db()

    query = """
    CREATE OR REPLACE FUNCTION update_has_gaps_update_needed_field() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            UPDATE api_stationmeta 
            SET has_gaps_update_needed = true 
            WHERE station_id = (
            SELECT api_id 
            FROM stations s 
            WHERE s."NetworkCode" = OLD."NetworkCode" and s."StationCode" = OLD."StationCode" 
            );
            RETURN OLD;
        ELSE
            UPDATE api_stationmeta 
            SET has_gaps_update_needed = true 
            WHERE station_id = (
            SELECT api_id 
            FROM stations s 
            WHERE s."NetworkCode" = NEW."NetworkCode" and s."StationCode" = NEW."StationCode" 
            );
            RETURN NEW;
        END IF;
    END;
    $$ LANGUAGE plpgsql;"""

    try:
        print("Executing: ", query)
        cur.execute(query)
    except Exception as e:
        print(f"Exception when creating function. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    cur.close()
    conn.close()


def create_gaps_triggers(apps, schema_editor):
    conn, cur = connect_to_db()

    query = """
    CREATE OR REPLACE TRIGGER update_has_gaps_update_needed_field_trigger
    AFTER INSERT OR UPDATE OR DELETE ON rinex
    FOR EACH ROW EXECUTE FUNCTION update_has_gaps_update_needed_field();
    """

    try:
        print("Executing: ", query)
        cur.execute(query)
    except psycopg2.errors.DuplicateObject as e:
        print(f"Trigger already exists. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    query = """
    CREATE TRIGGER update_has_gaps_update_needed_field_trigger
    AFTER INSERT OR UPDATE OR DELETE ON stationinfo
    FOR EACH ROW EXECUTE FUNCTION update_has_gaps_update_needed_field();"""

    try:
        print("Executing: ", query)
        cur.execute(query)
    except psycopg2.errors.DuplicateObject as e:
        print(f"Trigger already exists. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    cur.close()
    conn.close()


def create_station_roles(apps, schema_editor):
    StationRole = apps.get_model("api", "StationRole")
    StationRole.objects.get_or_create(name="Station Manager")
    StationRole.objects.get_or_create(name="Site Owner")
    StationRole.objects.get_or_create(name="Local Coordinator")


def create_station_type(apps, schema_editor):
    StationType = apps.get_model("api", "StationType")
    StationType.objects.get_or_create(name="Continuous")
    StationType.objects.get_or_create(name="Campaign")


def create_stationinfo_function(apps, schema_editor):
    conn, cur = connect_to_db()

    query = """
    CREATE OR REPLACE FUNCTION update_has_stationinfo_field() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            UPDATE api_stationmeta 
            SET has_stationinfo = EXISTS (SELECT 1 FROM stationinfo si where si."NetworkCode" = OLD."NetworkCode" and si."StationCode" = OLD."StationCode" )
            WHERE station_id = (
            SELECT api_id 
            FROM stations s 
            WHERE s."NetworkCode" = OLD."NetworkCode" and s."StationCode" = OLD."StationCode" 
            );
            RETURN OLD;
        ELSE
            UPDATE api_stationmeta 
            SET has_stationinfo = true 
            WHERE station_id = (
            SELECT api_id 
            FROM stations s 
            WHERE s."NetworkCode" = NEW."NetworkCode" and s."StationCode" = NEW."StationCode" 
            );
            RETURN NEW;
        END IF;
    END;
    $$ LANGUAGE plpgsql;"""

    try:
        print("Executing: ", query)
        cur.execute(query)
    except Exception as e:
        print(f"Exception when creating function. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    cur.close()
    conn.close()


def create_stationinfo_trigger(apps, schema_editor):
    conn, cur = connect_to_db()

    query = """
    CREATE OR REPLACE TRIGGER update_has_stationinfo_field_trigger
    AFTER INSERT OR UPDATE OR DELETE ON stationinfo
    FOR EACH ROW EXECUTE FUNCTION update_has_stationinfo_field();
    """

    try:
        print("Executing: ", query)
        cur.execute(query)
    except psycopg2.errors.DuplicateObject as e:
        print(f"Trigger already exists. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    cur.close()
    conn.close()


def create_station_function(apps, schema_editor):
    conn, cur = connect_to_db()

    query = """
    CREATE OR REPLACE FUNCTION delete_rows_referencing_stations() RETURNS TRIGGER AS $$
    DECLARE
	    deleted_visit_id INTEGER;
    BEGIN
    	    -- delete related rows from api tables
	    DELETE FROM api_stationmeta WHERE station_id = OLD.api_id; 
	    DELETE FROM api_rolepersonstation WHERE station_id = OLD.api_id;
	    DELETE FROM api_stationimages WHERE station_id = OLD.api_id;
	    DELETE FROM api_stationattachedfiles WHERE station_id = OLD.api_id;
	    
	    -- delete visits and other related rows (also from api tables)
	    DELETE FROM api_visits WHERE station_id = OLD.api_id RETURNING id INTO deleted_visit_id;
	    DELETE FROM api_visitimages WHERE visit_id = deleted_visit_id;
	    DELETE FROM api_visitattachedfiles WHERE visit_id = deleted_visit_id;
	    DELETE FROM api_visitgnssdatafiles WHERE visit_id = deleted_visit_id;
	    DELETE FROM api_visits_people WHERE visits_id = deleted_visit_id;
	    
	    -- delete from stationinfo
	    DELETE FROM stationinfo WHERE "NetworkCode" = OLD."NetworkCode" and "StationCode" = OLD."StationCode";
	    
	    -- rinex rows must not be deleted
	    
	    RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;"""

    try:
        print("Executing: ", query)
        cur.execute(query)
    except Exception as e:
        print(f"Exception when creating function. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    cur.close()
    conn.close()


def create_station_trigger(apps, schema_editor):
    conn, cur = connect_to_db()

    query = """
    CREATE OR REPLACE TRIGGER delete_rows_referencing_stations_trigger
    BEFORE DELETE ON stations
    FOR EACH ROW EXECUTE FUNCTION delete_rows_referencing_stations();
    """

    try:
        print("Executing: ", query)
        cur.execute(query)
    except psycopg2.errors.DuplicateObject as e:
        print(f"Trigger already exists. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    cur.close()
    conn.close()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_countries),
        migrations.RunPython(add_station_country_code_index),
        migrations.RunPython(add_alias_field_to_station),
        migrations.RunPython(add_ant_daz_field_to_stationinfo),
        migrations.RunPython(create_admin_user),
        migrations.RunPython(create_endpoints),
        migrations.RunPython(create_endpoints_cluster_types),
        migrations.RunPython(create_resources),
        migrations.RunPython(create_endpoints_cluster),
        migrations.RunPython(create_underprivileged_front_user),
        migrations.RunPython(create_underprivileged_api_user),
        migrations.RunPython(insert_station_status),
        migrations.RunPython(insert_default_station_meta),
        migrations.RunPython(create_gaps_function),
        migrations.RunPython(create_gaps_triggers),
        migrations.RunPython(create_station_roles),
        migrations.RunPython(create_station_type),
        migrations.RunPython(create_stationinfo_function),
        migrations.RunPython(create_stationinfo_trigger),
        migrations.RunPython(create_station_function),
        migrations.RunPython(create_station_trigger),
    ]
