# Generated by Django 5.0.4 on 2025-07-29 18:06

from django.db import migrations
from django.conf import settings
import psycopg2


def connect_to_db():
    conn = psycopg2.connect(
        f'dbname={settings.DATABASES["default"]["NAME"]} user={settings.DATABASES["default"]["USER"]} password={settings.DATABASES["default"]["PASSWORD"]} host={settings.DATABASES["default"]["HOST"]} port={settings.DATABASES["default"]["PORT"]}')

    cur = conn.cursor()

    return conn, cur


def alter_earthquakes_table(apps, schema_editor):
    conn, cur = connect_to_db()
    # Check if columns already exist before adding them
    cur.execute("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'earthquakes' 
        AND column_name IN ('density', 'c_kml', 'cp_kml')
    """)
    existing_columns = [row[0] for row in cur.fetchall()]

    columns_to_add = []
    if 'density' not in existing_columns:
        columns_to_add.append('ADD COLUMN density INTEGER DEFAULT NULL')
    if 'c_kml' not in existing_columns:
        columns_to_add.append('ADD COLUMN c_kml TEXT DEFAULT NULL')
    if 'cp_kml' not in existing_columns:
        columns_to_add.append('ADD COLUMN cp_kml TEXT DEFAULT NULL')

    if columns_to_add:
        query = f"""
                ALTER TABLE earthquakes
                {', '.join(columns_to_add)};
            """
    else:
        query = "-- All columns already exist, no changes needed"
        print("All columns already exist, skipping ALTER TABLE")

    try:
        print("Executing: ", query)
        cur.execute(query)
    except Exception as e:
        print(f"Exception ocurred: {e}")
        print("Rolling back...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    # Check if index already exists
    cur.execute("""
        SELECT indexname 
        FROM pg_indexes 
        WHERE tablename = 'earthquakes' 
        AND indexname = 'earthquake_id_key'
    """)
    index_exists = cur.fetchone() is not None

    if not index_exists:
        query = f"""
                CREATE UNIQUE INDEX earthquake_id_key ON earthquakes (id);
            """

        try:
            print("Executing: ", query)
            cur.execute(query)
        except Exception as e:
            print(f"Exception ocurred: {e}")
            print("Rolling back...")
            conn.rollback()
        else:
            conn.commit()
        finally:
            print("---------------------------")
    else:
        print("Index earthquake_id_key already exists, skipping creation")
        print("---------------------------")

    cur.close()
    conn.close()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0036_user_clustering_distance'),
    ]

    operations = [
        migrations.RunPython(alter_earthquakes_table)
    ]
